<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Bootloader_Fw_APR_Project\Bootloader_Fw_APR_Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Bootloader_Fw_APR_Project\Bootloader_Fw_APR_Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140002: Last Updated: Mon Aug  4 16:06:54 2025
<BR><P>
<H3>Maximum Stack Usage =        280 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL2_Config
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2b]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2b]">ADC1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32h5xx_it.o(.text.BusFault_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[57]">COMP1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[45]">CRS_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2c]">DAC1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[50]">DTS_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32h5xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1c]">EXTI10_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1d]">EXTI11_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1e]">EXTI12_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1f]">EXTI13_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[20]">EXTI14_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[21]">EXTI15_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[17]">EXTI5_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[18]">EXTI6_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[19]">EXTI7_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1a]">EXTI8_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1b]">EXTI9_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2d]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2e]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4e]">FPU_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[22]">GPDMA1_Channel0_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[23]">GPDMA1_Channel1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[24]">GPDMA1_Channel2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[25]">GPDMA1_Channel3_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[26]">GPDMA1_Channel4_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[27]">GPDMA1_Channel5_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[28]">GPDMA1_Channel6_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[29]">GPDMA1_Channel7_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[46]">GPDMA2_Channel0_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[47]">GPDMA2_Channel1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[48]">GPDMA2_Channel2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[49]">GPDMA2_Channel3_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4a]">GPDMA2_Channel4_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4b]">GPDMA2_Channel5_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4c]">GPDMA2_Channel6_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4d]">GPDMA2_Channel7_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[10]">GTZC_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[52]">HASH_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32h5xx_it.o(.text.HardFault_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[38]">I2C1_ER_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[37]">I2C1_EV_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3a]">I2C2_ER_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[39]">I2C2_EV_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[54]">I3C1_ER_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[53]">I3C1_EV_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[56]">I3C2_ER_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[55]">I3C2_EV_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4f]">ICACHE_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2a]">IWDG_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[42]">LPTIM1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[43]">LPTIM2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[41]">LPUART1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32h5xx_it.o(.text.MemManage_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32h5xx_it.o(.text.NMI_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[b]">PVD_AVD_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32h5xx_it.o(.text.PendSV_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[e]">RAMCFG_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[11]">RCC_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[51]">RNG_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[c]">RTC_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3b]">SPI1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3c]">SPI2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32h5xx_it.o(.text.SVC_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32h5xx_it.o(.text.SysTick_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[58]">SystemInit</a> from system_stm32h5xx.o(.text.SystemInit) referenced from startup_stm32h503xx.o(.text)
 <LI><a href="#[d]">TAMP_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2f]">TIM1_BRK_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[32]">TIM1_CC_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[31]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[30]">TIM1_UP_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[33]">TIM2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[34]">TIM3_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[35]">TIM6_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[36]">TIM7_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3e]">USART1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3f]">USART2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[40]">USART3_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[44]">USB_DRD_FS_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32h5xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[61]">W5500_Deselect</a> from w5500_spi.o(.text.W5500_Deselect) referenced 2 times from w5500_spi.o(.text.w5500_Init)
 <LI><a href="#[64]">W5500_ReadBuff</a> from w5500_spi.o(.text.W5500_ReadBuff) referenced 2 times from w5500_spi.o(.text.w5500_Init)
 <LI><a href="#[62]">W5500_ReadByte</a> from w5500_spi.o(.text.W5500_ReadByte) referenced 2 times from w5500_spi.o(.text.w5500_Init)
 <LI><a href="#[60]">W5500_Select</a> from w5500_spi.o(.text.W5500_Select) referenced 2 times from w5500_spi.o(.text.w5500_Init)
 <LI><a href="#[65]">W5500_WriteBuff</a> from w5500_spi.o(.text.W5500_WriteBuff) referenced 2 times from w5500_spi.o(.text.w5500_Init)
 <LI><a href="#[63]">W5500_WriteByte</a> from w5500_spi.o(.text.W5500_WriteByte) referenced 2 times from w5500_spi.o(.text.w5500_Init)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[59]">__main</a> from __main.o(!!!main) referenced from startup_stm32h503xx.o(.text)
 <LI><a href="#[68]">wizchip_bus_readdata</a> from wizchip_conf.o(.text.wizchip_bus_readdata) referenced from wizchip_conf.o(.data.WIZCHIP)
 <LI><a href="#[69]">wizchip_bus_writedata</a> from wizchip_conf.o(.text.wizchip_bus_writedata) referenced from wizchip_conf.o(.data.WIZCHIP)
 <LI><a href="#[66]">wizchip_cris_enter</a> from wizchip_conf.o(.text.wizchip_cris_enter) referenced from wizchip_conf.o(.data.WIZCHIP)
 <LI><a href="#[67]">wizchip_cris_exit</a> from wizchip_conf.o(.text.wizchip_cris_exit) referenced from wizchip_conf.o(.data.WIZCHIP)
 <LI><a href="#[5b]">wizchip_cs_deselect</a> from wizchip_conf.o(.text.wizchip_cs_deselect) referenced from wizchip_conf.o(.data.WIZCHIP)
 <LI><a href="#[5b]">wizchip_cs_deselect</a> from wizchip_conf.o(.text.wizchip_cs_deselect) referenced 2 times from wizchip_conf.o(.text.reg_wizchip_cs_cbfunc)
 <LI><a href="#[5a]">wizchip_cs_select</a> from wizchip_conf.o(.text.wizchip_cs_select) referenced from wizchip_conf.o(.data.WIZCHIP)
 <LI><a href="#[5a]">wizchip_cs_select</a> from wizchip_conf.o(.text.wizchip_cs_select) referenced 2 times from wizchip_conf.o(.text.reg_wizchip_cs_cbfunc)
 <LI><a href="#[5e]">wizchip_spi_readburst</a> from wizchip_conf.o(.text.wizchip_spi_readburst) referenced 2 times from wizchip_conf.o(.text.reg_wizchip_spiburst_cbfunc)
 <LI><a href="#[5c]">wizchip_spi_readbyte</a> from wizchip_conf.o(.text.wizchip_spi_readbyte) referenced 2 times from wizchip_conf.o(.text.reg_wizchip_spi_cbfunc)
 <LI><a href="#[5f]">wizchip_spi_writeburst</a> from wizchip_conf.o(.text.wizchip_spi_writeburst) referenced 2 times from wizchip_conf.o(.text.reg_wizchip_spiburst_cbfunc)
 <LI><a href="#[5d]">wizchip_spi_writebyte</a> from wizchip_conf.o(.text.wizchip_spi_writebyte) referenced 2 times from wizchip_conf.o(.text.reg_wizchip_spi_cbfunc)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[59]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[6c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[d4]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[d5]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[6d]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[d6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[73]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[6e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[d7]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[d8]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[d9]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[da]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[db]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[dc]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[dd]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[de]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[df]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[e0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[e1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[e2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[e3]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[e4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[e6]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[e9]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[78]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[eb]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[ec]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[ed]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[ee]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[ef]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[f0]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[f1]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[6b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[f2]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[70]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[72]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[f3]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[74]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[f4]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[84]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[77]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[f5]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[79]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>

<P><STRONG><a name="[2b]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DTS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>GPDMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>GPDMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>GPDMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>GPDMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>GPDMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>GPDMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>GPDMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>GPDMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>GPDMA2_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>GPDMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>GPDMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>GPDMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>GPDMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>GPDMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>GPDMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>GPDMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GTZC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>HASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I3C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I3C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I3C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I3C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>ICACHE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RAMCFG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USB_DRD_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b4]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Mess_Rx
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Mess_Rx
</UL>

<P><STRONG><a name="[7c]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[f6]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Mess_Rx
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Ethernet
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Mess_Rx
</UL>

<P><STRONG><a name="[80]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[7f]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[f7]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[f8]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[76]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[fe]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ff]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[100]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>Boodloader_Check</STRONG> (Thumb, 1134 bytes, Stack size 88 bytes, bootloader.o(.text.Boodloader_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Boodloader_Check &rArr; Flash_Write_APR_Infor &rArr; HAL_FLASH_Program
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DeInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_APR_Infor
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>Check_ResetChip</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bootloader.o(.text.Check_ResetChip))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Check_ResetChip
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[92]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, stm32h5xx_hal_flash.o(.text.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[8b]"></a>Flash_Write_APR_Infor</STRONG> (Thumb, 272 bytes, Stack size 80 bytes, bootloader.o(.text.Flash_Write_APR_Infor))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Flash_Write_APR_Infor &rArr; HAL_FLASH_Program
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Mess_Rx
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AP_Informations
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boodloader_Check
</UL>

<P><STRONG><a name="[94]"></a>Get_AP_Informations</STRONG> (Thumb, 1062 bytes, Stack size 80 bytes, bootloader.o(.text.Get_AP_Informations))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Get_AP_Informations &rArr; Flash_Write_APR_Infor &rArr; HAL_FLASH_Program
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_APR_Infor
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>HAL_CRCEx_Polynomial_Set</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, stm32h5xx_hal_crc_ex.o(.text.HAL_CRCEx_Polynomial_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[b1]"></a>HAL_CRC_Accumulate</STRONG> (Thumb, 618 bytes, Stack size 20 bytes, stm32h5xx_hal_crc.o(.text.HAL_CRC_Accumulate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CRC_Accumulate
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Mess_Rx
</UL>

<P><STRONG><a name="[95]"></a>HAL_CRC_Init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32h5xx_hal_crc.o(.text.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, stm32h5xx_hal_msp.o(.text.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[8d]"></a>HAL_DeInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32h5xx_hal.o(.text.HAL_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boodloader_Check
</UL>

<P><STRONG><a name="[87]"></a>HAL_Delay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32h5xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Ethernet
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Mess_Rx
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AP_Informations
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boodloader_Check
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_Config
</UL>

<P><STRONG><a name="[89]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, stm32h5xx_hal_flash_ex.o(.text.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Mess_Rx
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AP_Informations
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boodloader_Check
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase
</UL>

<P><STRONG><a name="[8a]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h5xx_hal_flash.o(.text.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Mess_Rx
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AP_Informations
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_APR_Infor
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boodloader_Check
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase
</UL>

<P><STRONG><a name="[93]"></a>HAL_FLASH_Program</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, stm32h5xx_hal_flash.o(.text.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_FLASH_Program
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Mess_Rx
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_APR_Infor
</UL>

<P><STRONG><a name="[88]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32h5xx_hal_flash.o(.text.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Mess_Rx
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AP_Informations
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_APR_Infor
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boodloader_Check
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase
</UL>

<P><STRONG><a name="[aa]"></a>HAL_GPIO_Init</STRONG> (Thumb, 408 bytes, Stack size 44 bytes, stm32h5xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h5xx_hal_gpio.o(.text.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Mess_Rx
</UL>

<P><STRONG><a name="[86]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h5xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Ethernet
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AP_Informations
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boodloader_Check
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Select
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Deselect
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h5xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Ethernet
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Mess_Rx
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_ResetChip
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>

<P><STRONG><a name="[cb]"></a>HAL_ICACHE_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h5xx_hal_icache.o(.text.HAL_ICACHE_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h5xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[99]"></a>HAL_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32h5xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>HAL_InitTick</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32h5xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_GetCLKSourceConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[98]"></a>HAL_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_hal.o(.text.HAL_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DeInit
</UL>

<P><STRONG><a name="[9e]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a1]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32h5xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[9a]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h5xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a2]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1714 bytes, Stack size 32 bytes, stm32h5xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[a4]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 612 bytes, Stack size 32 bytes, stm32h5xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[8e]"></a>HAL_RCC_DeInit</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, stm32h5xx_hal_rcc.o(.text.HAL_RCC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_DeInit &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boodloader_Check
</UL>

<P><STRONG><a name="[9b]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 296 bytes, Stack size 8 bytes, stm32h5xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a5]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1570 bytes, Stack size 32 bytes, stm32h5xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a6]"></a>HAL_SPI_Init</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, stm32h5xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 150 bytes, Stack size 184 bytes, stm32h5xx_hal_msp.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[ab]"></a>HAL_SPI_Receive</STRONG> (Thumb, 658 bytes, Stack size 32 bytes, stm32h5xx_hal_spi.o(.text.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_ReadByte
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_ReadBuff
</UL>

<P><STRONG><a name="[ad]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 920 bytes, Stack size 32 bytes, stm32h5xx_hal_spi.o(.text.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_WriteByte
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_WriteBuff
</UL>

<P><STRONG><a name="[9c]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, stm32h5xx_hal_cortex.o(.text.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a0]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h5xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[9f]"></a>HAL_SYSTICK_GetCLKSourceConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32h5xx_hal_cortex.o(.text.HAL_SYSTICK_GetCLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ae]"></a>Handle_Mess_Rx</STRONG> (Thumb, 4490 bytes, Stack size 36 bytes, bootloader.o(.text.Handle_Mess_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = Handle_Mess_Rx &rArr; Flash_Write_APR_Infor &rArr; HAL_FLASH_Program
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Accumulate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_APR_Infor
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Erase
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ETHERNET
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>Read_ETHERNET</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, bootloader.o(.text.Read_ETHERNET))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = Read_ETHERNET &rArr; Handle_Mess_Rx &rArr; Flash_Write_APR_Infor &rArr; HAL_FLASH_Program
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Mess_Rx
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>Setup_Ethernet</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, bootloader.o(.text.Setup_Ethernet))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Setup_Ethernet &rArr; w5500_Config &rArr; ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_Config
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlsocket
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>SystemClock_Config</STRONG> (Thumb, 188 bytes, Stack size 128 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>SystemInit</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, system_stm32h5xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>W5500_Deselect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, w5500_spi.o(.text.W5500_Deselect))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5500_spi.o(.text.w5500_Init)
</UL>
<P><STRONG><a name="[64]"></a>W5500_ReadBuff</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, w5500_spi.o(.text.W5500_ReadBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W5500_ReadBuff &rArr; HAL_SPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5500_spi.o(.text.w5500_Init)
</UL>
<P><STRONG><a name="[62]"></a>W5500_ReadByte</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, w5500_spi.o(.text.W5500_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W5500_ReadByte &rArr; HAL_SPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5500_spi.o(.text.w5500_Init)
</UL>
<P><STRONG><a name="[60]"></a>W5500_Select</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, w5500_spi.o(.text.W5500_Select))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5500_spi.o(.text.w5500_Init)
</UL>
<P><STRONG><a name="[65]"></a>W5500_WriteBuff</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, w5500_spi.o(.text.W5500_WriteBuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = W5500_WriteBuff &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5500_spi.o(.text.w5500_Init)
</UL>
<P><STRONG><a name="[63]"></a>W5500_WriteByte</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, w5500_spi.o(.text.W5500_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = W5500_WriteByte &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5500_spi.o(.text.w5500_Init)
</UL>
<P><STRONG><a name="[b6]"></a>WIZCHIP_READ</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, w5500.o(.text.WIZCHIP_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ETHERNET
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlsocket
</UL>

<P><STRONG><a name="[c3]"></a>WIZCHIP_READ_BUF</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, w5500.o(.text.WIZCHIP_READ_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[c4]"></a>WIZCHIP_WRITE</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, w5500.o(.text.WIZCHIP_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_clrinterrupt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlsocket
</UL>

<P><STRONG><a name="[c2]"></a>WIZCHIP_WRITE_BUF</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, w5500.o(.text.WIZCHIP_WRITE_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetinfo
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[c1]"></a>ctlnetwork</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, wizchip_conf.o(.text.ctlnetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ctlnetwork &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_Config
</UL>

<P><STRONG><a name="[bd]"></a>ctlsocket</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, socket.o(.text.ctlsocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ctlsocket &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Ethernet
</UL>

<P><STRONG><a name="[c5]"></a>ctlwizchip</STRONG> (Thumb, 498 bytes, Stack size 16 bytes, wizchip_conf.o(.text.ctlwizchip))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_clrinterrupt
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_Config
</UL>

<P><STRONG><a name="[b7]"></a>getSn_RX_RSR</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, w5500.o(.text.getSn_RX_RSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getSn_RX_RSR
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ETHERNET
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[ce]"></a>getSn_TX_FSR</STRONG> (Thumb, 464 bytes, Stack size 56 bytes, w5500.o(.text.getSn_TX_FSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = getSn_TX_FSR
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[75]"></a>main</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = main &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Ethernet
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ETHERNET
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AP_Informations
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_ResetChip
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boodloader_Check
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ICACHE_Enable
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b8]"></a>recvfrom</STRONG> (Thumb, 598 bytes, Stack size 56 bytes, socket.o(.text.recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = recvfrom &rArr; wiz_recv_data
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_ignore
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_ETHERNET
</UL>

<P><STRONG><a name="[d0]"></a>reg_wizchip_cs_cbfunc</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, wizchip_conf.o(.text.reg_wizchip_cs_cbfunc))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_Init
</UL>

<P><STRONG><a name="[d1]"></a>reg_wizchip_spi_cbfunc</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, wizchip_conf.o(.text.reg_wizchip_spi_cbfunc))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_Init
</UL>

<P><STRONG><a name="[d2]"></a>reg_wizchip_spiburst_cbfunc</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, wizchip_conf.o(.text.reg_wizchip_spiburst_cbfunc))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_Init
</UL>

<P><STRONG><a name="[b2]"></a>sendto</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, socket.o(.text.sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sendto &rArr; wiz_send_data
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Mess_Rx
</UL>

<P><STRONG><a name="[bc]"></a>socket</STRONG> (Thumb, 402 bytes, Stack size 56 bytes, socket.o(.text.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = socket &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Ethernet
</UL>

<P><STRONG><a name="[bb]"></a>w5500_Config</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, w5500_spi.o(.text.w5500_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = w5500_Config &rArr; ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Ethernet
</UL>

<P><STRONG><a name="[ba]"></a>w5500_Init</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, w5500_spi.o(.text.w5500_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = w5500_Init &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetinfo
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_spiburst_cbfunc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_spi_cbfunc
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_cs_cbfunc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Ethernet
</UL>

<P><STRONG><a name="[cc]"></a>wiz_recv_data</STRONG> (Thumb, 496 bytes, Stack size 56 bytes, w5500.o(.text.wiz_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wiz_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[cd]"></a>wiz_recv_ignore</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, w5500.o(.text.wiz_recv_ignore))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wiz_recv_ignore
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
</UL>

<P><STRONG><a name="[cf]"></a>wiz_send_data</STRONG> (Thumb, 496 bytes, Stack size 56 bytes, w5500.o(.text.wiz_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wiz_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
</UL>

<P><STRONG><a name="[68]"></a>wizchip_bus_readdata</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_bus_readdata))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[69]"></a>wizchip_bus_writedata</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_bus_writedata))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[c7]"></a>wizchip_clrinterrupt</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizchip_clrinterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizchip_clrinterrupt &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[66]"></a>wizchip_cris_enter</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_cris_enter))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[67]"></a>wizchip_cris_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_cris_exit))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[5b]"></a>wizchip_cs_deselect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_cs_deselect))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(.text.reg_wizchip_cs_cbfunc)
<LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[5a]"></a>wizchip_cs_select</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_cs_select))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(.text.reg_wizchip_cs_cbfunc)
<LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[c9]"></a>wizchip_init</STRONG> (Thumb, 386 bytes, Stack size 16 bytes, wizchip_conf.o(.text.wizchip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[d3]"></a>wizchip_setnetinfo</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizchip_setnetinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wizchip_setnetinfo &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_Init
</UL>

<P><STRONG><a name="[5e]"></a>wizchip_spi_readburst</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_spi_readburst))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.text.reg_wizchip_spiburst_cbfunc)
</UL>
<P><STRONG><a name="[5c]"></a>wizchip_spi_readbyte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_spi_readbyte))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.text.reg_wizchip_spi_cbfunc)
</UL>
<P><STRONG><a name="[5f]"></a>wizchip_spi_writeburst</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_spi_writeburst))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.text.reg_wizchip_spiburst_cbfunc)
</UL>
<P><STRONG><a name="[5d]"></a>wizchip_spi_writebyte</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_spi_writebyte))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.text.reg_wizchip_spi_cbfunc)
</UL>
<P><STRONG><a name="[c6]"></a>wizchip_sw_reset</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, wizchip_conf.o(.text.wizchip_sw_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[c8]"></a>wizphy_setphyconf</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizphy_setphyconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizphy_setphyconf &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[ca]"></a>wizphy_setphypmode</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizphy_setphypmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wizphy_setphypmode &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[6f]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[103]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[104]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8f]"></a>Flash_Erase</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, bootloader.o(.text.Flash_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Flash_Erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Mess_Rx
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boodloader_Check
</UL>

<P><STRONG><a name="[8c]"></a>__NVIC_SystemReset</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, bootloader.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_Ethernet
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_Mess_Rx
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AP_Informations
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Boodloader_Check
</UL>

<P><STRONG><a name="[a3]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, stm32h5xx_hal_rcc_ex.o(.text.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[ac]"></a>SPI_CloseTransfer</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32h5xx_hal_spi.o(.text.SPI_CloseTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
